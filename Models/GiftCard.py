from Models.Model import Model
from DataBase.Sqlite import Database
import datetime as dt


class GiftCard(Model):

    PrimaryKey = 'id'
    TableName = 'gift_cards'

    def __init__(self, id:int, start_date:str, expiration_date:str, code:str=None) -> None:
        """
        :param id: The id of the gift card
        :param code: The code of the gift card
        :param start_date: Use the format Year-Month-Day
        :param expiration_date: Use the format Year-Month-Day
        """
        super(GiftCard, self).__init__(id)
        self.id = id
        self.code = code
        self.start_date = start_date
        self.expiration_date = expiration_date
    
    def __str__(self):
        return f'GiftCard({self.id},{self.code},{self.start_date.date()},{self.expiration_date.date()})'
    
    def __repr__(self):
        return f'GiftCard({self.id},{self.code},{self.start_date.date()},{self.expiration_date.date()})'

    @staticmethod
    def GetDefaultCode() -> str:
        """Returns the current system datetime as the default code"""
        return dt.datetime.now().strftime("%Y%m%d%H%M%S")
    
    @property
    def code(self):
        return self._code
    
    @code.setter
    def code(self, new_code:str):
        if new_code is None:
            # default code is generated by the system time
            self._code = self.GetDefaultCode()
        
        elif not isinstance(new_code, str):
            raise TypeError("invalid code")

        else:
            self._code = new_code

    @property
    def expiration_date(self):
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, new_expiration_date:str):
        try:
            expiration_date_dt = dt.datetime.strptime(new_expiration_date, '%Y-%m-%d')
            
            if expiration_date_dt < self.start_date:
                raise ValueError("expiration date must be after start date")

            self._expiration_date = expiration_date_dt
        except ValueError:
            raise ValueError('Invalid date format. Use this format "Year-Month-Day"')

    @property
    def start_date(self):
        return self._start_date
    
    @start_date.setter
    def start_date(self, new_start_date:str):
        try:
            start_date_dt = dt.datetime.strptime(new_start_date, '%Y-%m-%d')
            
            if start_date_dt < dt.datetime.now():
                raise ValueError('Start date must be today or after today')
            
            self._start_date = start_date_dt
        except ValueError:
            raise ValueError('Invalid date format. Use this format "Year-Month-Day"')

    @staticmethod
    def Create(data:dict) -> int:
        """Add a new GiftCard to the database."""
        
        if 'code' not in data:
            data['code'] = GiftCard.GetDefaultCode()

        # check if the code is already in the database
        elif GiftCard.ExistsByKey('code', data['code']):
            raise ValueError("code already exists")

        return Database.Create(GiftCard.TableName, data)
        
    @staticmethod
    def Get(id:int) -> 'GiftCard':
        """Get a GiftCard from the database."""
        fetched_row = Database.Read(GiftCard.TableName, id)
        
        if not len(fetched_row):
            return None

        fetched_row = fetched_row[0]

        return GiftCard(id=fetched_row[0], code=fetched_row[1], start_date=fetched_row[2], expiration_date=fetched_row[3])

    @staticmethod
    def GetAll() -> list['GiftCard']:
        """Get all GiftCards from the database."""
        fetched_rows = Database.ReadAll(GiftCard.TableName)
        
        giftCards = []

        for row in fetched_rows:
            giftCards.append(GiftCard(
                id=row[0],
                code=row[1],
                start_date=row[2],
                expiration_date=row[3]
                ))

        return giftCards

    @staticmethod
    def Exists(id: int) -> bool:
        """Check if a GiftCard exists in the database."""
        return Database.Exists(GiftCard.TableName, GiftCard.PrimaryKey, id)
    
    @staticmethod
    def ExistsByKey(key:str, value):
        """Check if a GiftCard exists in the database."""
        return Database.Exists(GiftCard.TableName, key, value)

    @staticmethod
    def Update(id:int, data:dict) -> None:
        """Update a GiftCard in the database."""
        
        if not data:
            raise ValueError("data is empty")

        Database.Update(GiftCard.TableName, GiftCard.PrimaryKey, id, data)

    @staticmethod
    def Delete(id:int) -> None:
        """Delete a GiftCard from the database."""
        Database.Delete(GiftCard.TableName, id)

    @staticmethod
    def GetByKey(key:str, value) -> 'GiftCard':
        """Get a GiftCard from the database by its code."""
        fetched_data = Database.Read(GiftCard.TableName, key, value)
        
        if not len(fetched_data):
            return None
        
        fetched_data = fetched_data[0]

        id = fetched_data[0]
        code = fetched_data[1]
        start_date = dt.datetime.strptime(fetched_data[2], '%Y-%m-%d')
        expiration_date = dt.datetime.strptime(fetched_data[3], '%Y-%m-%d')

        return GiftCard(id=id, code=code, start_date=start_date, expiration_date=expiration_date)
